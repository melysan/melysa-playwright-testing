import { test, expect } from '@playwright/test'

//we are testing on local host 3000
var homePage = 'http://localhost:3000';
var aboutPage = 'http://localhost:3000/about';
var gradesPage = 'http://localhost:3000/grades';

test.beforeAll(async () => {
    console.log("Before tests");
})

test.afterAll(async () => {
    console.log("After tests");
})

test.describe("Head tag area", () => {
    test.skip("Contains the head tag and its contents", async ({ page }) => {
        await page.goto(homePage); //when it goes to homepage
        await expect(page).toHaveTitle('Example #1'); //see if the title is Example #1
        const metaDescription = page.locator('meta[name="description"]'); //locating
        await expect(metaDescription).toHaveAttribute('content', 'Generated by create next app'); //matching
        const linkIcon = page.locator('link[rel="icon"]');
        await expect(linkIcon).toHaveAttribute('href', '/favicon.ico');
    })
})


test.describe("Main content tests", () => {
    test.skip('Should contain a heading welcome to my home page', async ({ page }) => {
        await page.goto(homePage);
        await expect(page.locator('h1')).toContainText("Welcome to my home page");
    })
    test.skip('Should contain a list to describe CRUD', async ({ page }) => {
        await page.goto(homePage);
        await expect(page.locator('ul > li')).toContainText(["Create", "Read", "Update", "Delete"]);
    })
})

//.skip so you don't see error in terminal; if you're not working on it yet
test.describe("Linking to another page", () => {
    test.skip('Should contain a link to about page', async ({ page }) => {
        await page.goto(homePage);
        await page.click('text=About Page');
        await expect(page).toHaveURL(aboutPage);
    })
    test.skip('Should contain a link to grades page', async ({ page }) => {
        await page.goto(homePage);
        await page.click('text=Grades Page');
        await expect(page).toHaveURL(gradesPage);
    })
})


test.describe('Button tests', () => {
    test('This is the info component', async ({ page }) => {
        await page.goto(homePage);
        await expect(page.locator('button')).toContainText("View all this info")
    })
})

test.describe('Footer Tests', () => {
    test('Should contain a footer on the home page', async ({ page }) => {
        await page.goto(homePage);
        await expect(page.locator('footer')).toContainText('In Class Example #1');
    })
})

test.describe('Check about page navigates to home page', () => {
    test('Should navigate to the home page', async ({ page }) => {
        await page.goto(aboutPage);
        await page.click('text=Go Back');
        await expect(page).toHaveURL(homePage);
    })
})